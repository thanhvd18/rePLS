{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rePLS rePLS is a Python package for regression analysis and aims to control confounding effects. The package includes Residual Partial Least Squares (rePLS), Residual Principle Component Regession (rePCR) and Residual Multiple Linear Regression (reMLR). We build rePLS prediction model in the standard way of Scikit-learn.","title":"Home"},{"location":"#repls","text":"rePLS is a Python package for regression analysis and aims to control confounding effects. The package includes Residual Partial Least Squares (rePLS), Residual Principle Component Regession (rePCR) and Residual Multiple Linear Regression (reMLR). We build rePLS prediction model in the standard way of Scikit-learn.","title":"rePLS"},{"location":"introduction/","text":"An Introduction to rePLS Install pip install rePLS Usage ```(python) from rePLS import rePLS, rePCR, reMLR import numpy as np n_samples, n_features, n_outcomes, n_confounders = 100, 10,5,2 n_components = 2 rng = np.random.RandomState(0) Y = rng.randn(n_samples,n_outcomes) X = rng.randn(n_samples, n_features) Z = rng.randn(n_samples, n_confounders) reg = rePLS(Z=Z,n_components=n_components) reg.fit(X,Y) Y_pred = reg.predict(X,Z) <!-- ### Simulation data https://share.streamlit.io/thanhvd18/re-pls-visualization/main/main.py --> ### Example: Least squares and residual least squares import numpy as np from rePLS import rePLS,reMLR import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression rng = np.random.RandomState(0) generate x,y N = 200 slope = 3 intercept = -1 x = np.random.uniform(-1,1,N) y = x*slope + intercept plt.plot(x,y,'r') x,y are affected by confounders confounders = np.random.randn( x.shape) 1.5 x = x + np.random.randn() confounders y = y + np.random.randn() confounders + np.random.rand( x.shape) 2 plt.scatter(x,y) using linear regression to find out relationship between x,y x = np.expand_dims(x, axis=1) lr = LinearRegression() lr.fit(x,y) y_pred = lr.predict(x) plt.plot(x,y_pred,'g') plt.legend(['True','Observe','OLS']) using residual linear regression confounders = np.expand_dims(confounders, axis=1) reg = reMLR(Z=confounders,n_components=0) reg.fit(x,y) y_plot_pred2 = x@reg.residual_model.coef_ y_pred2 = reg.predict(x,confounders) plt.plot(x,y_plot_pred2,'k') plt.legend(['True','Observe','OLS','reMLR']) ![](images/xy.png) **Compare correlation coefficient** import pandas as pd import seaborn as sns import scipy.stats as stats r, p = stats.pearsonr(y,y_pred) df = pd.DataFrame({'y':y, 'y_LR':y_pred, 'y_reMLR':y_pred2}) sns.regplot(x=\"y_LR\", y=\"y\", data=df); plt.legend([f'r={r:.2f}, P={p:1.1e}']) ![](images/LR.png) r, p = stats.pearsonr(y,y_pred2) sns.regplot(x=\"y_reMLR\", y=\"y\", data=df); plt.legend([f'r={r:.2f}, P={p:1.1e}']) ``` Example of rePLS for multivariate input (brain areas), multivariate output (disease scores) Simulation","title":"Get started"},{"location":"introduction/#an-introduction-to-repls","text":"","title":"An Introduction to rePLS"},{"location":"introduction/#install","text":"pip install rePLS","title":"Install"},{"location":"introduction/#usage","text":"```(python) from rePLS import rePLS, rePCR, reMLR import numpy as np n_samples, n_features, n_outcomes, n_confounders = 100, 10,5,2 n_components = 2 rng = np.random.RandomState(0) Y = rng.randn(n_samples,n_outcomes) X = rng.randn(n_samples, n_features) Z = rng.randn(n_samples, n_confounders) reg = rePLS(Z=Z,n_components=n_components) reg.fit(X,Y) Y_pred = reg.predict(X,Z) <!-- ### Simulation data https://share.streamlit.io/thanhvd18/re-pls-visualization/main/main.py --> ### Example: Least squares and residual least squares import numpy as np from rePLS import rePLS,reMLR import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression rng = np.random.RandomState(0)","title":"Usage"},{"location":"introduction/#generate-xy","text":"N = 200 slope = 3 intercept = -1 x = np.random.uniform(-1,1,N) y = x*slope + intercept plt.plot(x,y,'r')","title":"generate x,y"},{"location":"introduction/#xy-are-affected-by-confounders","text":"confounders = np.random.randn( x.shape) 1.5 x = x + np.random.randn() confounders y = y + np.random.randn() confounders + np.random.rand( x.shape) 2 plt.scatter(x,y)","title":"x,y are affected by confounders"},{"location":"introduction/#using-linear-regression-to-find-out-relationship-between-xy","text":"x = np.expand_dims(x, axis=1) lr = LinearRegression() lr.fit(x,y) y_pred = lr.predict(x) plt.plot(x,y_pred,'g') plt.legend(['True','Observe','OLS'])","title":"using linear regression to find out relationship between x,y"},{"location":"introduction/#using-residual-linear-regression","text":"confounders = np.expand_dims(confounders, axis=1) reg = reMLR(Z=confounders,n_components=0) reg.fit(x,y) y_plot_pred2 = x@reg.residual_model.coef_ y_pred2 = reg.predict(x,confounders) plt.plot(x,y_plot_pred2,'k') plt.legend(['True','Observe','OLS','reMLR']) ![](images/xy.png) **Compare correlation coefficient** import pandas as pd import seaborn as sns import scipy.stats as stats r, p = stats.pearsonr(y,y_pred) df = pd.DataFrame({'y':y, 'y_LR':y_pred, 'y_reMLR':y_pred2}) sns.regplot(x=\"y_LR\", y=\"y\", data=df); plt.legend([f'r={r:.2f}, P={p:1.1e}']) ![](images/LR.png) r, p = stats.pearsonr(y,y_pred2) sns.regplot(x=\"y_reMLR\", y=\"y\", data=df); plt.legend([f'r={r:.2f}, P={p:1.1e}']) ```","title":"using residual linear regression"},{"location":"introduction/#example-of-repls-for-multivariate-input-brain-areas-multivariate-output-disease-scores","text":"Simulation","title":"Example of rePLS for multivariate input (brain areas), multivariate output (disease scores)"},{"location":"reference/","text":"rePLS Residual Partial Least Squares Parameters: - Z: confounders matrix - n_components: Number of components rePCR Residual Principle Component Regession Parameters: - Z: confounders matrix - n_components: Number of components reMLR Residual Multiple Linear Regression Parameters: - Z: confounders matrix","title":"Reference"},{"location":"reference/#repls","text":"Residual Partial Least Squares Parameters: - Z: confounders matrix - n_components: Number of components","title":"rePLS"},{"location":"reference/#repcr","text":"Residual Principle Component Regession Parameters: - Z: confounders matrix - n_components: Number of components","title":"rePCR"},{"location":"reference/#remlr","text":"Residual Multiple Linear Regression Parameters: - Z: confounders matrix","title":"reMLR"}]}